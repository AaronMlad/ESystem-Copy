/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.esystem;

import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author amalda
 */
public class StudentGUI extends javax.swing.JFrame {

    /**
     * Creates new form StudentGUI
     */
    public StudentGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        studId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        studName = new javax.swing.JTextField();
        studAdd = new javax.swing.JTextField();
        studContact = new javax.swing.JTextField();
        studGender = new javax.swing.JTextField();
        studYrlvl = new javax.swing.JTextField();
        Save = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        enrollTable = new javax.swing.JTable();
        enroll = new javax.swing.JButton();
        drop = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        firstSem = new javax.swing.JMenuItem();
        secondSem = new javax.swing.JMenuItem();
        summer = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        studId.setEditable(false);
        studId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studIdActionPerformed(evt);
            }
        });

        jLabel1.setText("ID:");

        jLabel2.setText("Name:");

        jLabel3.setText("Address");

        jLabel4.setText("Contact:");

        jLabel5.setText("Gender:");

        jLabel6.setText("Year Level:");

        studName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studNameActionPerformed(evt);
            }
        });

        studAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studAddActionPerformed(evt);
            }
        });

        studContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studContactActionPerformed(evt);
            }
        });

        studGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studGenderActionPerformed(evt);
            }
        });

        studYrlvl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studYrlvlActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveMouseClicked(evt);
            }
        });
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        studTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Address", "Contact", "Gender", "Year Level"
            }
        ));
        studTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studTable);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(30, 0, 255));
        jLabel7.setText("Students Form");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Enrolled Subjects");

        enrollTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "SubjID", "SubjCode", "SubjDesc", "SubjUnits", "SubjSched"
            }
        ));
        enrollTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enrollTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(enrollTable);

        enroll.setText("Enroll Subject");
        enroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollActionPerformed(evt);
            }
        });

        drop.setText("Drop Subject");
        drop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropActionPerformed(evt);
            }
        });

        jMenu4.setText("Form");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jMenuItem4.setText("Teacher");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuItem5.setText("Subject");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuBar2.add(jMenu4);

        jMenu2.setText("Database");

        firstSem.setText("1st Semester");
        firstSem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstSemActionPerformed(evt);
            }
        });
        jMenu2.add(firstSem);

        secondSem.setText("2nd Semester");
        secondSem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondSemActionPerformed(evt);
            }
        });
        jMenu2.add(secondSem);

        summer.setText("Summer");
        summer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summerActionPerformed(evt);
            }
        });
        jMenu2.add(summer);

        jMenuBar2.add(jMenu2);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(studName, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                                            .addComponent(studAdd)
                                            .addComponent(studContact)
                                            .addComponent(studGender)
                                            .addComponent(studYrlvl)
                                            .addComponent(studId)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel7))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(Save)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Delete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Update)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drop)
                            .addComponent(enroll))
                        .addGap(126, 126, 126)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 440, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(studName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(studAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(studContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(studGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(studYrlvl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Update)
                            .addComponent(Delete)
                            .addComponent(Save)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(enroll)
                        .addGap(18, 18, 18)
                        .addComponent(drop)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void studIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studIdActionPerformed

    private void studNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studNameActionPerformed

    private void studAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studAddActionPerformed

    private void studContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studContactActionPerformed

    private void studGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studGenderActionPerformed

    private void studYrlvlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studYrlvlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studYrlvlActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        Students save = new Students();
        save.SaveRecord(studName.getText(), studAdd.getText(), studContact.getText(), studGender.getText(), studYrlvl.getText());
        showRecords();
    }//GEN-LAST:event_SaveActionPerformed

    private void SaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveMouseClicked

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        showRecords();
        Students delete = new Students();
        delete.DeleteRecord(Integer.valueOf(studId.getText()));
        showRecords();
    }//GEN-LAST:event_DeleteActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        showRecords();
        Students update = new Students();
        update.UpdateRecord(Integer.valueOf(studId.getText()), studName.getText(), studAdd.getText(), studContact.getText(), studGender.getText(), studYrlvl.getText());
        showRecords();
    }//GEN-LAST:event_UpdateActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        TeacherGUI teacher = new TeacherGUI();
        teacher.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        SubjectGUI subject = new SubjectGUI();
        subject.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void studTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studTableMouseClicked
        int row = studTable.rowAtPoint(evt.getPoint());
        if (row >= 0) {
            studId.setText(studTable.getValueAt(row,0).toString());
            studName.setText(studTable.getValueAt(row,1).toString());
            studAdd.setText(studTable.getValueAt(row,2).toString());
            studContact.setText(studTable.getValueAt(row,3).toString());
            studGender.setText(studTable.getValueAt(row,4).toString());
            studYrlvl.setText(studTable.getValueAt(row,5).toString());
        }
        SubjectGUI.selectedStudentId = Integer.parseInt(studTable.getValueAt(row,0).toString());
        showEnrollRec();
    }//GEN-LAST:event_studTableMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        showRecords();
        Students stud = new Students();
        stud.LoadRecords();
    }//GEN-LAST:event_formWindowOpened

    private void enrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollActionPerformed
        if (SubjectGUI.selectedStudentId == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a student first.");
            return;
        }
        
        if (SubjectGUI.selectedSubjectId == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a subject first from the Subject Form.");
            return;
        }
        
        
        Enrolled enroll = new Enrolled();
        enroll.DBConnect();
        enroll.setsubjid(SubjectGUI.selectedSubjectId);
        
        String result = enroll.enrollStudent(SubjectGUI.selectedStudentId);
        javax.swing.JOptionPane.showMessageDialog(this, result);
        
        
        showEnrollRec();
    }//GEN-LAST:event_enrollActionPerformed

    private void dropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropActionPerformed
        // Check if both student and subject are selected
        if (SubjectGUI.selectedStudentId == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a student first.");
            return;
        }
        
        if (SubjectGUI.selectedEnrollSubjectId == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a subject from the Enrolled Subjects table first.");
            return;
        }
        
        // Perform drop subject
        Enrolled drop = new Enrolled();
        drop.DBConnect();
        drop.setsubjid(SubjectGUI.selectedEnrollSubjectId);
        
        String result = drop.dropSubject(SubjectGUI.selectedStudentId);
        javax.swing.JOptionPane.showMessageDialog(this, result);
        
        // Refresh the enrolled subjects table
        showEnrollRec();
    }//GEN-LAST:event_dropActionPerformed

    private void enrollTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enrollTableMouseClicked
        int row = enrollTable.rowAtPoint(evt.getPoint());
        if (row >= 0) {
            SubjectGUI.selectedEnrollSubjectId = Integer.parseInt(enrollTable.getValueAt(row,0).toString());
        }
    }//GEN-LAST:event_enrollTableMouseClicked

    private void firstSemActionPerformed(java.awt.event.ActionEvent evt) {
        createDatabase("1stSem");
    }

private void secondSemActionPerformed(java.awt.event.ActionEvent evt) {
        createDatabase("2ndSem");
    }

    private void summerActionPerformed(java.awt.event.ActionEvent evt) {
        createDatabase("summer");
    }

        public void showRecords() {
        DefaultTableModel tblmodel = (DefaultTableModel) studTable.getModel();
        tblmodel.setRowCount(0);
        ESystem show = new ESystem();
        show.DBConnect();
        try {
            String query = "SELECT * FROM Students;";
            show.rs = show.st.executeQuery(query);
            while (show.rs.next()) {
                String id = show.rs.getString("studid");
                String name = show.rs.getString("studname");
                String address = show.rs.getString("studadd");
                String contact = show.rs.getString("studcontact");
                String gender = show.rs.getString("studgender");
                String yrlvl = show.rs.getString("studyrlvl");
                
                String[] item = {id, name, address, contact, gender, yrlvl};
                tblmodel.addRow(item);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
        
    private void showEnrollRec(){
        DefaultTableModel model = (DefaultTableModel) enrollTable.getModel();
    model.setRowCount(0);
    
    if (SubjectGUI.selectedStudentId == -1) {
        return;
    }
    
    ESystem show = new ESystem();
    show.DBConnect();
    try {
        String query = "SELECT * FROM Subjects " +
                       "JOIN Enroll ON Subjects.subjid = Enroll.subjid " +
                       "WHERE Enroll.studid = " + SubjectGUI.selectedStudentId;
        
        show.rs = show.st.executeQuery(query);
        
        while (show.rs.next()) {
            String subjectId = show.rs.getString("subjid");
            String code = show.rs.getString("subjcode");
            String description = show.rs.getString("subjdesc");
            String units = show.rs.getString("subjunits");
            String schedule = show.rs.getString("subjsched");
            
            model.addRow(new String[]{
                subjectId, 
                code, 
                description, 
                units, 
                schedule
            });
        }
    } 
    catch (Exception ex) { 
        System.out.println("Error loading enrollment records: " + ex.getMessage());
    }
    }
        
        
    private void createDatabase(String semester) {
        try {
            // Get current year and next year for the database name
            int currentYear = java.time.Year.now().getValue();
            String dbName = String.format("%s_sy%d_%d", semester, currentYear, currentYear + 1);
            
            // Connect to MySQL without specifying a database
            String url = "jdbc:mysql://10.4.44.171:3306/";
            String user = "root";
            String password = "stoic";
            
            try (Connection conn = DriverManager.getConnection(url, user, password);
                 Statement stmt = conn.createStatement()) {
                
                // Create the database if it doesn't exist
                String createDbSql = String.format("CREATE DATABASE IF NOT EXISTS `%s`;", dbName);
                stmt.executeUpdate(createDbSql);
                
                // Use the new database
                stmt.executeUpdate("USE `" + dbName + "`");
                
                // Create Students table
                String createStudentsTable = "CREATE TABLE IF NOT EXISTS Students (" +
                    "studid INT PRIMARY KEY AUTO_INCREMENT, " +
                    "studname TEXT NOT NULL, " +
                    "studadd TEXT, " +
                    "studcontact TEXT, " +
                    "studgender TEXT, " +
                    "studyrlvl TEXT" +
                    ");";
                
                // Create Subjects table
                String createSubjectsTable = "CREATE TABLE IF NOT EXISTS Subjects (" +
                    "subjid INT PRIMARY KEY AUTO_INCREMENT, " +
                    "subjcode TEXT NOT NULL, " +
                    "subjdesc TEXT, " +
                    "subjunits INT, " +
                    "subjsched TEXT" +
                    ");";
                
                // Create Enroll table
                String createEnrollTable = "CREATE TABLE IF NOT EXISTS Enroll (" +
                    "eid INT PRIMARY KEY AUTO_INCREMENT, " +
                    "studid INT, " +
                    "subjid INT, " +
                    "FOREIGN KEY (studid) REFERENCES Students(studid) ON DELETE CASCADE, " +
                    "FOREIGN KEY (subjid) REFERENCES Subjects(subjid) ON DELETE CASCADE" +
                    ");";
                
                // Create Grades table
                String createGradesTable = "CREATE TABLE IF NOT EXISTS Grades (" +
                    "GradeID INT PRIMARY KEY AUTO_INCREMENT, " +
                    "eid INT, " +
                    "Prelim TEXT, " +
                    "Midterm TEXT, " +
                    "Prefinal TEXT, " +
                    "Final TEXT, " +
                    "FOREIGN KEY (eid) REFERENCES Enroll(eid) ON DELETE CASCADE" +
                    ");";
                
                // Create Teachers table
                String createTeachersTable = "CREATE TABLE IF NOT EXISTS Teachers (" +
                    "tid INT PRIMARY KEY AUTO_INCREMENT, " +
                    "tname TEXT NOT NULL, " +
                    "tdept TEXT, " +
                    "tadd TEXT, " +
                    "tcontact TEXT, " +
                    "tstatus TEXT" +
                    ");";
                
                // Create Assign table
                String createAssignTable = "CREATE TABLE IF NOT EXISTS Assign (" +
                    "tid INT, " +
                    "subjid INT, " +
                    "PRIMARY KEY (tid, subjid), " +
                    "FOREIGN KEY (tid) REFERENCES Teachers(tid) ON DELETE CASCADE, " +
                    "FOREIGN KEY (subjid) REFERENCES Subjects(subjid) ON DELETE CASCADE" +
                    ");";
                
                // Create TransactionCharges table
                String createTransactionChargesTable = "CREATE TABLE IF NOT EXISTS TransactionCharges (" +
                    "TransID INT PRIMARY KEY AUTO_INCREMENT, " +
                    "Department TEXT, " +
                    "SubjUnits DECIMAL(10,2), " +
                    "Insurance DECIMAL(10,2), " +
                    "Computer DECIMAL(10,2), " +
                    "Laboratory DECIMAL(10,2), " +
                    "Cultural DECIMAL(10,2), " +
                    "Library DECIMAL(10,2), " +
                    "Facility DECIMAL(10,2)" +
                    ");";
                
                // Create Invoice table
                String createInvoiceTable = "CREATE TABLE IF NOT EXISTS Invoice (" +
                    "Invoicenum INT PRIMARY KEY AUTO_INCREMENT, " +
                    "studid INT, " +
                    "TransID INT, " +
                    "FOREIGN KEY (studid) REFERENCES Students(studid) ON DELETE CASCADE, " +
                    "FOREIGN KEY (TransID) REFERENCES TransactionCharges(TransID) ON DELETE CASCADE" +
                    ");";
                
                // Execute all table creation statements
                stmt.executeUpdate(createStudentsTable);
                stmt.executeUpdate(createSubjectsTable);
                stmt.executeUpdate(createEnrollTable);
                stmt.executeUpdate(createGradesTable);
                stmt.executeUpdate(createTeachersTable);
                stmt.executeUpdate(createAssignTable);
                stmt.executeUpdate(createTransactionChargesTable);
                stmt.executeUpdate(createInvoiceTable);
                
                javax.swing.JOptionPane.showMessageDialog(this, 
                    String.format("Successfully created database '%s' with all required tables.", dbName));
                
            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Error creating database: " + ex.getMessage(), 
                    "Database Error", 
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Error: " + ex.getMessage(), 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton Save;
    private javax.swing.JButton Update;
    private javax.swing.JButton drop;
    private javax.swing.JButton enroll;
    private javax.swing.JTable enrollTable;
    private javax.swing.JMenuItem firstSem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem secondSem;
    private javax.swing.JTextField studAdd;
    private javax.swing.JTextField studContact;
    private javax.swing.JTextField studGender;
    private javax.swing.JTextField studId;
    private javax.swing.JTextField studName;
    private javax.swing.JTable studTable;
    private javax.swing.JTextField studYrlvl;
    private javax.swing.JMenuItem summer;
    // End of variables declaration//GEN-END:variables
}
