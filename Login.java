/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.esystem;

import java.sql.*;
import javax.swing.JOptionPane;

/**
 *
 * @author amalda
 */
public class Login extends javax.swing.JFrame {
    // Session state for two-step login
    private boolean dbListLoaded = false;
    private boolean submitListenerAttached = false;
    private String sessionUsername;
    private String sessionPassword;

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        uname = new javax.swing.JTextField();
        loginUser = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        sySelection = new javax.swing.JComboBox<>();
        submit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        pswd = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        uname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unameActionPerformed(evt);
            }
        });

        loginUser.setText("Login");
        loginUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginUserActionPerformed(evt);
            }
        });

        jLabel3.setText("School Year:");

        sySelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "School Year" }));
        sySelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sySelectionActionPerformed(evt);
            }
        });

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(30, 0, 255));
        jLabel4.setText("LOGIN FORM");

        pswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pswdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(submit)
                            .addComponent(loginUser)
                            .addComponent(sySelection, 0, 160, Short.MAX_VALUE)
                            .addComponent(pswd)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(81, 81, 81))
            .addGroup(layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel4)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(loginUser)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sySelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submit)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void unameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unameActionPerformed

    private void sySelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sySelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sySelectionActionPerformed

    private void pswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pswdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pswdActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            Object sel = sySelection.getSelectedItem();
            if (sel == null) {
                JOptionPane.showMessageDialog(this, "No database selected");
                return;
            }

            String selectedDb = sel.toString();

            // Determine user role
            System.out.println(sessionUsername+" "+sessionPassword);
            String userRole = determineUserRole(sessionUsername, sessionPassword);

            // Set database credentials
            ESystem.setDatabaseCredentials(selectedDb, sessionUsername, sessionPassword);

            // Redirect based on user role - only create one instance
            System.out.println(userRole);
            switch (userRole.toLowerCase()) {
                case "student":
                    // For students, open StudRegistration form
                    if (studRegInstance == null || !studRegInstance.isVisible()) {
                        studRegInstance = new StudRegistration();
                        studRegInstance.setVisible(true);
                    } else {
                        studRegInstance.toFront();
                    }
                    break;

                case "teacher":
                    // For teachers, open GradesForm
                        System.out.println("herherhehrehrherhere");
                    if (gradesFormInstance == null || !gradesFormInstance.isVisible()) {
                        gradesFormInstance = new GradesForm();
                        gradesFormInstance.setVisible(true);
                    } else {
                        gradesFormInstance.toFront();
                    }
                    break;

                case "root":
                    // For root/admin, open StudentGUI
                    if (studentGUIInstance == null || !studentGUIInstance.isVisible()) {
                        studentGUIInstance = new StudentGUI();
                        studentGUIInstance.setVisible(true);
                    } else {
                        studentGUIInstance.toFront();
                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Unknown user role");
                    return;
            }

            // Close the login window
            this.dispose();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
            
    private boolean checkUserPrivileges(String username, String password) {
        try {
            // First try to connect to a specific database that the user should have access to
            // If this works, the user has valid credentials
            Connection conn = DriverManager.getConnection("jdbc:mysql://10.4.44.171:3306/?zeroDateTimeBehavior=convertToNull",
                    username, password);

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SHOW DATABASES LIKE '%sy%'");

            conn.close();
            return true;
        } catch (SQLException e) {
            // If connection to server fails, try connecting to mysql database
            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://10.4.44.171:3306/mysql?zeroDateTimeBehavior=convertToNull",
                        username, password);
                conn.close();
                return true;
            } catch (SQLException e2) {
                return false;
            }
        }
    }
    
    private String determineUserRole(String username, String password) {
        try {
            // try to connect to a database the user should have access to
            Connection conn = DriverManager.getConnection("jdbc:mysql://10.4.44.171:3306/?zeroDateTimeBehavior=convertToNull",
                    username, password);
            Statement stmt = conn.createStatement();

            // check for root user (has all privileges)
//            ResultSet rs = stmt.executeQuery("SELECT * FROM mysql.user WHERE User = " + username + "");
            System.out.println("E");
//            
//            if (rs.next()) {
//                conn.close();
//                return "root";
//            }
            ResultSet rs;
            
            boolean hasSelect = false;
            boolean hasInsert = false;
            boolean hasUpdate = false;
            boolean hasAllPrivileges = false;
            // Check grants for different privilege levels
            try{
                rs = stmt.executeQuery("SHOW GRANTS FOR '" + username + "'@'%'");
                while (rs.next()) {
                String grant = rs.getString(1).toUpperCase();
                    System.out.println(grant);
                if (grant.contains("SELECT")) {
                    hasSelect = true;
                }
                if (grant.contains("INSERT")) {
                    hasInsert = true;
                }
                if (grant.contains("UPDATE")) {
                    hasUpdate = true;
                }
                if (grant.contains("ALL PRIVILEGES")) {
                    hasAllPrivileges = true;
                }
            }
            }catch(Exception ex){
                System.out.println("FAIL: " + ex);
            }

            conn.close();

            // Determine role based on privileges
            if (hasSelect && hasInsert && hasUpdate) {
                return "teacher";
            } else if (hasSelect) {
                return "student";
            } else if (hasAllPrivileges) {
                return "root";
            }

        } catch (SQLException e) {
            System.out.println("RIP");
            // If we can't access mysql database, try a different approach
            // For now, assume it's a student if we can connect to the server
            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://10.4.44.171:3306/?zeroDateTimeBehavior=convertToNull",
                        username, password);
                conn.close();
                return "student";
            } catch (SQLException e2) {
                // Cannot connect to server
            }
        }
        return "unknown";
    }
    
    private void loginUserActionPerformed(java.awt.event.ActionEvent evt) {
        String username = uname.getText();
        String password = new String(pswd.getPassword());

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter both username and password");
            return;
        }

        try {
            // Check if credentials have changed or if this is the first login
            if (!dbListLoaded || !username.equals(sessionUsername) || !password.equals(sessionPassword)) {
                if (checkUserPrivileges(username, password)) {
                    // Determine user role based on privileges
                    String userRole = determineUserRole(username, password);

                    if (userRole.equals("unknown")) {
                        JOptionPane.showMessageDialog(this, "Unable to determine user role. Insufficient privileges.");
                        return;
                    }

                    // Store credentials and role for step 2
                    sessionUsername = username;
                    sessionPassword = password;

                    // Load available SY databases from server
                    try (Connection conn = DriverManager.getConnection("jdbc:mysql://10.4.44.171:3306/?zeroDateTimeBehavior=convertToNull",
                                                                     sessionUsername, sessionPassword);
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery("SHOW DATABASES")) {
                        javax.swing.DefaultComboBoxModel<String> model = new javax.swing.DefaultComboBoxModel<>();
                        String firstDb = null;

                        // First pass: find all matching databases
                        while (rs.next()) {
                            String dbName = rs.getString(1);
                            if (dbName != null && dbName.matches("^(1stSem|2ndSem|summer)_sy\\d{4}_\\d{4}$")) {
                                // Check if user has privileges on this database
                                try {
                                    Connection dbConn = DriverManager.getConnection(
                                        "jdbc:mysql://10.4.44.171:3306/" + dbName + "?zeroDateTimeBehavior=convertToNull",
                                        sessionUsername, sessionPassword);
                                    dbConn.close();

                                    // User has access, add to list
                                    model.addElement(dbName);
                                    // Prefer 1stSem as the default if available
                                    if (firstDb == null || dbName.startsWith("1stSem")) {
                                        firstDb = dbName;
                                    }
                                } catch (SQLException e) {
                                    // User doesn't have access to this database, skip it
                                }
                            }
                        }
                        if (model.getSize() == 0) {
                            JOptionPane.showMessageDialog(this, "No semester databases found. Please create a semester database first.");
                            return;
                        }

                        sySelection.setModel(model);
                        // Set the first (or 1stSem) database as selected
                        if (firstDb != null) {
                            sySelection.setSelectedItem(firstDb);
                        } else {
                            sySelection.setSelectedIndex(0);
                        }

                        dbListLoaded = true;
                        JOptionPane.showMessageDialog(this, "Click Submit to continue with the selected database.");
                    }

                    // Attach submit listener only once
                    if (!submitListenerAttached) {
                        submit.addActionListener(e -> submitActionPerformed(e));
                        submitListenerAttached = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid credentials or insufficient privileges");
                    // Reset state for re-entry
                    dbListLoaded = false;
                    sySelection.setModel(new javax.swing.DefaultComboBoxModel<>());
                }
            } else {
                // Same credentials, just remind to use Submit
                JOptionPane.showMessageDialog(this, "Database list already loaded. Please select a database and click Submit.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Login failed: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Instance variables to prevent multiple form creation
    public static StudRegistration studRegInstance = null;
    public static GradesForm gradesFormInstance = null;
    public static StudentGUI studentGUIInstance = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loginUser;
    private javax.swing.JPasswordField pswd;
    private javax.swing.JButton submit;
    private javax.swing.JComboBox<String> sySelection;
    private javax.swing.JTextField uname;
    // End of variables declaration//GEN-END:variables
}
